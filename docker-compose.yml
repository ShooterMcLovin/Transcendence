# services:
#   web:
#     build: ./django
#     volumes:
#       - ./django:/code  
#     env_file:
#       - .env
#     ports:
#       - "8000:8000"  
#     depends_on:
#       db:
#         condition: service_healthy  # Ensures 'db' service is healthy before starting 'web'

#   db:
#     build: ./postgresql
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     env_file:
#       - .env
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#       interval: 10s
#       retries: 5
  
#   nginx:
#     build: ./nginx
#     volumes:
#       - ./django:/code  
#     ports:
#       - "80:80"
#       - "443:443"
#     depends_on:
#       - web

#   grafana:
#     image: grafana/grafana:latest
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
#     ports:
#       - "3000:3000"
#     volumes:
#       - grafana_data:/var/lib/grafana
#     depends_on:
#       - db
#     links:
#       - db

# volumes:
#   postgres_data:
#     driver: local
#     driver_opts:
#       type: none
#       o: bind
#       device: /Users/mkramer/Transcendence/postgresql/data

#   grafana_data:

networks:
  monitoring:
    name: monitoring
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/mkramer/Transcendence/postgresql/data
  # prometheus-data:
  #   driver: local
  prometheus:
    name: prometheus
    driver: local
    driver_opts:
      device: /Users/mkramer/Transcendence/prometheus
      o: bind
      type: none
  grafana:
    name: grafana
    driver: local
    driver_opts:
      device: /Users/mkramer/Transcendence/grafana
      o: bind
      type: none
  node_exporter:
    name: node_exporter
    driver: local
    driver_opts:
      device: /Users/mkramer/Transcendence/node_exporter
      o: bind
      type: none
  alertmanager:
    name: alertmanager
    driver: local
    driver_opts:
      device: /Users/mkramer/Transcendence/alertmanager
      o: bind
      type: none      
  # grafana-data:
  #   driver: local

services:
  web:
    build: ./django
    volumes:
      - ./django:/code  
    env_file:
      - .env
    ports:
      - "8000:8000"  
    depends_on:
      db:
        condition: service_healthy  # Ensures 'db' service is healthy before starting 'web'
    networks:
      - monitoring

  db:
    build: ./postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
    networks:
      - monitoring
        
  nginx:
    build: ./nginx
    volumes:
      - ./django:/code  
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - monitoring

  # prometheus:
  #   image: prom/prometheus:v2.37.9
  #   container_name: prometheus
  #   ports:
  #     - 9090:9090
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yaml'
  #   volumes:
  #     - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
  #     - ./data:/prometheus
  #   restart: unless-stopped
  #   networks:
  #     - monitoring
  prometheus:
    container_name: prometheus
    build: ./prometheus
    image: prometheus
    volumes:
      - prometheus:/volumes/prometheus
    ports:
      - '9090:9090'
    networks:
      - monitoring
    env_file:
      - .env
    restart: unless-stopped

  # grafana:
  #   image: grafana/grafana-oss:latest
  #   container_name: grafana
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   restart: unless-stopped
  #   #password: root123
  #   networks:
  #     - monitoring

  grafana:
    container_name: grafana
    build: ./grafana
    image: grafana
    ports:
      - 3000:3000
    volumes:
      - grafana:/volumes/grafana
    networks:
      - monitoring
    env_file:
      - .env
    restart: unless-stopped

  # node_exporter:
  #   image: quay.io/prometheus/node-exporter:v1.5.0
  #   container_name: node_exporter
  #   command: '--path.rootfs=/host'
  #   pid: host
  #   restart: unless-stopped
  #   volumes:
  #     - /:/host:ro,rbind
  #   networks:
  #     - monitoring

  node_exporter:
    container_name: node_exporter
    build: ./node_exporter
    image: node_exporter
    volumes:
      - node_exporter:/volumes/node_exporter
    ports:
      - '9100:9100'
    networks:
      - monitoring
    env_file:
      - .env
    restart: unless-stopped

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.47.0
  #   container_name: cadvisor
  #   command:
  #     - '-port=8098'
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   devices:
  #     - /dev/kmsg
  #   privileged: true
  #   restart: unless-stopped
  #   networks:
  #     - monitoring

  alertmanager:
    container_name: alertmanager
    build: ./alertmanager
    image: alertmanager
    volumes:
      - alertmanager:/volumes/alertmanager
    ports:
      - '9093:9093'
    networks:
      - monitoring
    env_file:
      - .env
    restart: unless-stopped