# services:
#   web:
#     build: ./django
#     volumes:
#       - ./django:/code  
#     env_file:
#       - .env
#     ports:
#       - "8000:8000"  
#     depends_on:
#       db:
#         condition: service_healthy  # Ensures 'db' service is healthy before starting 'web'

#   db:
#     build: ./postgresql
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     env_file:
#       - .env
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#       interval: 10s
#       retries: 5
  
#   nginx:
#     build: ./nginx
#     volumes:
#       - ./django:/code  
#     ports:
#       - "80:80"
#       - "443:443"
#     depends_on:
#       - web

#   grafana:
#     image: grafana/grafana:latest
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
#     ports:
#       - "3000:3000"
#     volumes:
#       - grafana_data:/var/lib/grafana
#     depends_on:
#       - db
#     links:
#       - db

# volumes:
#   postgres_data:
#     driver: local
#     driver_opts:
#       type: none
#       o: bind
#       device: /Users/mkramer/Transcendence/postgresql/data

#   grafana_data:

networks:
  monitoring:
    name: monitoring
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /Users/mkramer/Transcendence/postgresql/data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  web:
    build: ./django
    volumes:
      - ./django:/code  
    env_file:
      - .env
    ports:
      - "8000:8000"  
    depends_on:
      db:
        condition: service_healthy  # Ensures 'db' service is healthy before starting 'web'
    networks:
      - monitoring

  db:
    build: ./postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
    networks:
      - monitoring
        
  nginx:
    build: ./nginx
    volumes:
      - ./django:/code  
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - monitoring

#   prometheus:
#     image: prom/prometheus:v2.37.9
#     container_name: prometheus
#     ports:
#       - 9090:9090
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yaml'
#     volumes:
#       - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
#       - ./data:/prometheus
#     restart: unless-stopped
#     networks:
#       - monitoring

#   grafana:
#     image: grafana/grafana-oss:latest
#     container_name: grafana
#     ports:
#       - '3000:3000'
#     volumes:
#       - grafana-data:/var/lib/grafana
#     restart: unless-stopped
#     #password: root123
#     networks:
#       - monitoring

#   node_exporter:
#     image: quay.io/prometheus/node-exporter:v1.5.0
#     container_name: node_exporter
#     command: '--path.rootfs=/host'
#     pid: host
#     restart: unless-stopped
#     volumes:
#       - /:/host:ro,rbind
#     networks:
#       - monitoring

#   cadvisor:
#     image: gcr.io/cadvisor/cadvisor:v0.47.0
#     container_name: cadvisor
#     command:
#       - '-port=8098'
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:ro
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#       - /dev/disk/:/dev/disk:ro
#     devices:
#       - /dev/kmsg
#     privileged: true
#     restart: unless-stopped
#     networks:
#       - monitoring    